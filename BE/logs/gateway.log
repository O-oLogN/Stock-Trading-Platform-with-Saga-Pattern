2025-04-04 20:37:37 | INFO  | HV000001: Hibernate Validator 8.0.2.Final
2025-04-04 20:37:37 | INFO  | Starting ApiGatewayApplication using Java 23.0.2 with PID 14964 (D:\Code\Big Apps\Hybrid-Blockchain-Based-Stock-Trading-Platform-with-Arbitrage-Bot\BE\API-gateway\target\classes started by hiepg in D:\Code\Big Apps\Hybrid-Blockchain-Based-Stock-Trading-Platform-with-Arbitrage-Bot\BE)
2025-04-04 20:37:37 | DEBUG | Running with Spring Boot v3.4.3, Spring v6.2.3
2025-04-04 20:37:37 | INFO  | The following 1 profile is active: "local"
2025-04-04 20:37:40 | TRACE | Condition GatewayAutoConfiguration.OnVerboseDisabledCondition on org.springframework.cloud.gateway.config.GatewayAutoConfiguration$GatewayActuatorConfiguration#gatewayLegacyControllerEndpoint did not match due to NoneNestedConditions 1 matched 0 did not; NestedCondition on GatewayAutoConfiguration.OnVerboseDisabledCondition.VerboseDisabled @ConditionalOnProperty (spring.cloud.gateway.actuator.verbose.enabled) matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledGlobalFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration$NettyConfiguration#routingFilter matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledGlobalFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration$NettyConfiguration#nettyWriteResponseFilter matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledGlobalFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration$NettyConfiguration#reactorNettyWebSocketClient matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledGlobalFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration$NettyConfiguration#reactorNettyRequestUpgradeStrategy matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledGlobalFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#adaptCachedBodyGlobalFilter matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledGlobalFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#removeCachedBodyFilter matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledGlobalFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#routeToRequestUrlFilter matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledGlobalFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#forwardRoutingFilter matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledGlobalFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#forwardPathFilter matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledGlobalFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#webSocketService matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledGlobalFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#websocketRoutingFilter matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#weightCalculatorWebFilter matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#afterRoutePredicateFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#beforeRoutePredicateFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#betweenRoutePredicateFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#cookieRoutePredicateFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#headerRoutePredicateFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#hostRoutePredicateFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#methodRoutePredicateFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#pathRoutePredicateFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#queryRoutePredicateFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#readBodyPredicateFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#remoteAddrRoutePredicateFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#xForwardedRemoteAddrRoutePredicateFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#weightRoutePredicateFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledPredicate on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#cloudFoundryRouteServiceRoutePredicateFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#addRequestHeaderGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#addRequestHeadersIfNotPresentGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#mapRequestHeaderGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#addRequestParameterGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#addResponseHeaderGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#modifyRequestBodyGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#dedupeResponseHeaderGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#modifyResponseBodyGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#cacheRequestBodyGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#prefixPathGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#preserveHostHeaderGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#redirectToGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#removeJsonAttributesResponseBodyGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#removeRequestHeaderGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#removeRequestParameterGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#removeResponseHeaderGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#principalNameKeyResolver matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#requestRateLimiterGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#rewritePathGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#retryGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#setPathGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#secureHeadersGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#setRequestHeaderGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#setRequestHostHeaderGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#setResponseHeaderGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#rewriteResponseHeaderGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#rewriteLocationResponseHeaderGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#setStatusGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#saveSessionGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#stripPrefixGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#requestHeaderToRequestUriGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#requestSizeGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#requestHeaderSizeGatewayFilterFactory matched
2025-04-04 20:37:40 | TRACE | Condition OnEnabledFilter on org.springframework.cloud.gateway.config.GatewayAutoConfiguration#rewriteRequestParameterGatewayFilterFactory matched
2025-04-04 20:37:41 | INFO  | Multiple Spring Data modules found, entering strict repository configuration mode
2025-04-04 20:37:41 | INFO  | Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-04-04 20:37:41 | INFO  | Finished Spring Data repository scanning in 30 ms. Found 0 Redis repository interfaces.
2025-04-04 20:37:41 | INFO  | BeanFactory id=8a997a67-6382-3022-839c-c6c2175df29b
2025-04-04 20:37:42 | DEBUG | Starting with netty's non-blocking DNS resolver library
2025-04-04 20:37:43 | DEBUG | Starting without optional kqueue library
2025-04-04 20:37:43 | DEBUG | Starting without optional io_uring library
2025-04-04 20:37:44 | DEBUG | Starting without optional epoll library
2025-04-04 20:37:44 | DEBUG | -Dio.netty.eventLoopThreads: 4
2025-04-04 20:37:44 | DEBUG | Creating executor io.netty.util.concurrent.DefaultEventExecutorGroup
2025-04-04 20:37:44 | DEBUG | Starting with JFR support
2025-04-04 20:37:46 | DEBUG | Trying to get a Redis connection for: redis://default:********************************@redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com:14694?timeout=3s
2025-04-04 20:37:47 | DEBUG | Allocating executor io.netty.channel.nio.NioEventLoopGroup
2025-04-04 20:37:47 | DEBUG | Creating executor io.netty.channel.nio.NioEventLoopGroup
2025-04-04 20:37:48 | DEBUG | Adding reference to io.netty.channel.nio.NioEventLoopGroup@61d011e, existing ref count 0
2025-04-04 20:37:49 | DEBUG | Resolved SocketAddress redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694 using redis://default:********************************@redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com:14694?timeout=3s
2025-04-04 20:37:49 | DEBUG | Connecting to Redis at redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694
2025-04-04 20:37:49 | DEBUG | [channel=0xd35a518a, [id: 0xb4a446b5] (inactive), epid=0x1, chid=0x1] channelRegistered()
2025-04-04 20:37:49 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] write(ctx, AsyncCommand [type=HELLO, output=GenericMapOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command], promise)
2025-04-04 20:37:49 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694] writing command AsyncCommand [type=HELLO, output=GenericMapOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] Received: 705 bytes, 1 commands in the stack
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] Stack contains: 1 commands
2025-04-04 20:37:50 | DEBUG | Decode done, empty stack: true
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] Completing command LatencyMeteredCommand [type=HELLO, output=GenericMapOutput [output={server=redis, version=7.4.2, proto=3, id=25, mode=cluster, role=master, modules=name, ReJSON=ver, 20808=path, /enterprise-managed=args, name=searchlight, ver=21013, path=/enterprise-managed, args=FORK_GC_CLEAN_THRESHOLD, timeseries=ver, 11205=path, 100=MAXAGGREGATERESULTS, 10000=MT_MODE, MT_MODE_ONLY_ON_OPERATIONS=WORKER_THREADS}, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand]
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] write(ctx, [AsyncCommand [type=CLIENT, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command], AsyncCommand [type=CLIENT, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]], promise)
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694] writing command AsyncCommand [type=CLIENT, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694] writing command AsyncCommand [type=CLIENT, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] Received: 10 bytes, 2 commands in the stack
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] Stack contains: 2 commands
2025-04-04 20:37:50 | DEBUG | Decode done, empty stack: true
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] Completing command LatencyMeteredCommand [type=CLIENT, output=StatusOutput [output=OK, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand]
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] Stack contains: 1 commands
2025-04-04 20:37:50 | DEBUG | Decode done, empty stack: true
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] Completing command LatencyMeteredCommand [type=CLIENT, output=StatusOutput [output=OK, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand]
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] channelActive()
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1] activateEndpointAndExecuteBufferedCommands 0 command(s) buffered
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1] activating endpoint
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1] flushCommands()
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1] flushCommands() Flushing 0 commands
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, last known addr=redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694] channelActive()
2025-04-04 20:37:50 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] channelActive() done
2025-04-04 20:37:50 | DEBUG | Connecting to Redis at redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694: Success
2025-04-04 20:37:50 | DEBUG | dispatching command AsyncCommand [type=PING, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
2025-04-04 20:37:51 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1] write() writeAndFlush command AsyncCommand [type=PING, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
2025-04-04 20:37:51 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] write(ctx, AsyncCommand [type=PING, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command], promise)
2025-04-04 20:37:51 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694] writing command AsyncCommand [type=PING, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
2025-04-04 20:37:51 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1] write() done
2025-04-04 20:37:51 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] Received: 7 bytes, 1 commands in the stack
2025-04-04 20:37:51 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] Stack contains: 1 commands
2025-04-04 20:37:51 | DEBUG | Decode done, empty stack: true
2025-04-04 20:37:51 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] Completing command LatencyMeteredCommand [type=PING, output=StatusOutput [output=PONG, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand]
2025-04-04 20:37:51 | DEBUG | dispatching command AsyncCommand [type=PING, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
2025-04-04 20:37:51 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1] write() writeAndFlush command AsyncCommand [type=PING, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
2025-04-04 20:37:51 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1] write() done
2025-04-04 20:37:51 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] write(ctx, AsyncCommand [type=PING, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command], promise)
2025-04-04 20:37:51 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694] writing command AsyncCommand [type=PING, output=StatusOutput [output=null, error='null'], commandType=io.lettuce.core.protocol.Command]
2025-04-04 20:37:51 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] Received: 7 bytes, 1 commands in the stack
2025-04-04 20:37:51 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] Stack contains: 1 commands
2025-04-04 20:37:51 | DEBUG | Decode done, empty stack: true
2025-04-04 20:37:51 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] Completing command LatencyMeteredCommand [type=PING, output=StatusOutput [output=PONG, error='null'], commandType=io.lettuce.core.protocol.AsyncCommand]
2025-04-04 20:37:51 | INFO  | 

Using generated security password: 706742ba-d987-47e8-b906-003e7c4b352d

2025-04-04 20:37:53 | DEBUG | Routes supplied from Gateway Properties: [RouteDefinition{id='user-service-route', predicates=[PredicateDefinition{name='Path', args={_genkey_0=/users/**}}], filters=[], uri=http://localhost:8081, order=0, metadata={}, enabled=true}, RouteDefinition{id='account-service-route', predicates=[PredicateDefinition{name='Path', args={_genkey_0=/accounts/**}}], filters=[], uri=http://localhost:8083, order=0, metadata={}, enabled=true}, RouteDefinition{id='trading-service-route', predicates=[PredicateDefinition{name='Path', args={_genkey_0=/trading/**}}], filters=[], uri=http://localhost:8084, order=0, metadata={}, enabled=true}]
2025-04-04 20:37:54 | INFO  | Loaded RoutePredicateFactory [After]
2025-04-04 20:37:54 | INFO  | Loaded RoutePredicateFactory [Before]
2025-04-04 20:37:54 | INFO  | Loaded RoutePredicateFactory [Between]
2025-04-04 20:37:54 | INFO  | Loaded RoutePredicateFactory [Cookie]
2025-04-04 20:37:54 | INFO  | Loaded RoutePredicateFactory [Header]
2025-04-04 20:37:54 | INFO  | Loaded RoutePredicateFactory [Host]
2025-04-04 20:37:54 | INFO  | Loaded RoutePredicateFactory [Method]
2025-04-04 20:37:54 | INFO  | Loaded RoutePredicateFactory [Path]
2025-04-04 20:37:54 | INFO  | Loaded RoutePredicateFactory [Query]
2025-04-04 20:37:54 | INFO  | Loaded RoutePredicateFactory [ReadBody]
2025-04-04 20:37:54 | INFO  | Loaded RoutePredicateFactory [RemoteAddr]
2025-04-04 20:37:54 | INFO  | Loaded RoutePredicateFactory [XForwardedRemoteAddr]
2025-04-04 20:37:54 | INFO  | Loaded RoutePredicateFactory [Weight]
2025-04-04 20:37:54 | INFO  | Loaded RoutePredicateFactory [CloudFoundryRouteService]
2025-04-04 20:37:54 | INFO  | Exposing 2 endpoints beneath base path '/actuator'
2025-04-04 20:37:56 | INFO  | Netty started on port 8080 (http)
2025-04-04 20:37:56 | DEBUG | Starting RedisMessageListenerContainer...
2025-04-04 20:37:56 | DEBUG | Postpone listening for Redis messages until actual listeners are added
2025-04-04 20:37:56 | DEBUG | RouteDefinition user-service-route applying {_genkey_0=/users/**} to Path
2025-04-04 20:37:56 | DEBUG | RouteDefinition matched: user-service-route
2025-04-04 20:37:56 | DEBUG | RouteDefinition account-service-route applying {_genkey_0=/accounts/**} to Path
2025-04-04 20:37:56 | DEBUG | RouteDefinition matched: account-service-route
2025-04-04 20:37:56 | DEBUG | RouteDefinition trading-service-route applying {_genkey_0=/trading/**} to Path
2025-04-04 20:37:56 | DEBUG | RouteDefinition matched: trading-service-route
2025-04-04 20:37:56 | DEBUG | New routes count: 3
2025-04-04 20:37:56 | INFO  | Started ApiGatewayApplication in 20.62 seconds (process running for 25.004)
2025-04-04 20:38:27 | TRACE | Weights attr: {}
2025-04-04 20:38:27 | TRACE | Pattern "/users/**" matches against value "/users/api/v1/auth/login"
2025-04-04 20:38:27 | DEBUG | Route matched: user-service-route
2025-04-04 20:38:27 | DEBUG | Mapping [Exchange: POST http://localhost:8080/users/api/v1/auth/login] to Route{id='user-service-route', uri=http://localhost:8081, order=0, predicate=Paths: [/users/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:38:27 | DEBUG | [9a75a5a1-1] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:38:27 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:38:27 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:38:27 | DEBUG | Will instrument the HTTP request headers [X-Forwarded-For:"203.0.113.50,0:0:0:0:0:0:0:1", Content-Type:"application/json", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"31090421-822c-4bec-8e0b-0a9f59a6dd4e", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"69", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:59655"", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:38:27 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='POST', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='user-service-route', spring.cloud.gateway.route.uri='http://localhost:8081'], highCardinalityKeyValues=[http.uri='http://localhost:8080/users/api/v1/auth/login'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=0.0017166, duration(nanos)=1716600.0, startTimeNanos=1299420529090000}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@1c51565a'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@2722588f} created for the request. New headers are [X-Forwarded-For:"203.0.113.50,0:0:0:0:0:0:0:1", Content-Type:"application/json", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"31090421-822c-4bec-8e0b-0a9f59a6dd4e", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"69", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:59655"", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:38:27 | DEBUG | An exception occurred and observation was not previously stopped, will stop it. The exception was [io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: getsockopt: localhost/127.0.0.1:8081]
2025-04-04 20:38:27 | ERROR | [9a75a5a1-1]  500 Server Error for HTTP POST "/users/api/v1/auth/login"
io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: getsockopt: localhost/127.0.0.1:8081
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Assembly trace from producer [reactor.core.publisher.MonoError] :
	reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:94)
	reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:576)
Error has been observed at the following site(s):
	*__FluxOnErrorResume$ResumeSubscriber.onError ⇢ at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:576)
	*__________________________Mono.onErrorResume ⇢ at reactor.netty.transport.TransportConnector.lambda$connect$6(TransportConnector.java:166)
	*________________________________Mono.flatMap ⇢ at reactor.netty.transport.TransportConnector.connect(TransportConnector.java:165)
	*_________________________________Mono.create ⇢ at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator.connectChannel(DefaultPooledConnectionProvider.java:537)
	*_________________________________Mono.create ⇢ at reactor.netty.resources.PooledConnectionProvider.acquire(PooledConnectionProvider.java:130)
	*_________________________________Mono.create ⇢ at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.subscribe(HttpClientConnect.java:211)
	|_                             Mono.retryWhen ⇢ at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.subscribe(HttpClientConnect.java:282)
	*______________________________Flux.concatMap ⇢ at reactor.util.retry.RetrySpec.lambda$generateCompanion$6(RetrySpec.java:360)
	|_                           Flux.onErrorStop ⇢ at reactor.util.retry.RetrySpec.lambda$generateCompanion$6(RetrySpec.java:379)
	*________________________Flux.deferContextual ⇢ at reactor.util.retry.RetrySpec.generateCompanion(RetrySpec.java:357)
	*____________________________Mono.flatMapMany ⇢ at reactor.netty.http.client.HttpClientFinalizer.responseConnection(HttpClientFinalizer.java:102)
	*____________________________Mono.flatMapMany ⇢ at org.springframework.cloud.gateway.filter.NettyRoutingFilter.filter(NettyRoutingFilter.java:134)
	*___________________________________Flux.then ⇢ at org.springframework.cloud.gateway.filter.NettyRoutingFilter.filter(NettyRoutingFilter.java:200)
	*__________________________________Mono.defer ⇢ at org.springframework.cloud.gateway.handler.FilteringWebHandler$DefaultGatewayFilterChain.filter(FilteringWebHandler.java:154)
	*__________________________________Mono.defer ⇢ at org.springframework.cloud.gateway.handler.FilteringWebHandler$DefaultGatewayFilterChain.filter(FilteringWebHandler.java:154)
	*__________________________________Mono.defer ⇢ at org.springframework.cloud.gateway.handler.FilteringWebHandler$DefaultGatewayFilterChain.filter(FilteringWebHandler.java:154)
	*__________________________________Mono.defer ⇢ at org.springframework.cloud.gateway.handler.FilteringWebHandler$DefaultGatewayFilterChain.filter(FilteringWebHandler.java:154)
	|_                           Mono.doOnSuccess ⇢ at org.springframework.cloud.gateway.filter.GatewayMetricsFilter.filter(GatewayMetricsFilter.java:76)
	|_                             Mono.doOnError ⇢ at org.springframework.cloud.gateway.filter.GatewayMetricsFilter.filter(GatewayMetricsFilter.java:77)
	*__________________________________Mono.defer ⇢ at org.springframework.cloud.gateway.handler.FilteringWebHandler$DefaultGatewayFilterChain.filter(FilteringWebHandler.java:154)
	*__________________________________Mono.defer ⇢ at org.springframework.cloud.gateway.handler.FilteringWebHandler$DefaultGatewayFilterChain.filter(FilteringWebHandler.java:154)
	*___________________________________Mono.then ⇢ at org.springframework.cloud.gateway.filter.NettyWriteResponseFilter.filter(NettyWriteResponseFilter.java:69)
	|_                            Mono.doOnCancel ⇢ at org.springframework.cloud.gateway.filter.NettyWriteResponseFilter.filter(NettyWriteResponseFilter.java:101)
	|_                             Mono.doOnError ⇢ at org.springframework.cloud.gateway.filter.NettyWriteResponseFilter.filter(NettyWriteResponseFilter.java:102)
	*__________________________________Mono.defer ⇢ at org.springframework.cloud.gateway.handler.FilteringWebHandler$DefaultGatewayFilterChain.filter(FilteringWebHandler.java:154)
	*__________________________________Mono.defer ⇢ at org.springframework.cloud.gateway.handler.FilteringWebHandler$DefaultGatewayFilterChain.filter(FilteringWebHandler.java:154)
	|_                             Mono.doFinally ⇢ at org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter.filter(RemoveCachedBodyFilter.java:29)
	*__________________________________Mono.defer ⇢ at org.springframework.cloud.gateway.handler.FilteringWebHandler$DefaultGatewayFilterChain.filter(FilteringWebHandler.java:154)
	*___________________________________Mono.then ⇢ at org.springframework.web.reactive.result.SimpleHandlerAdapter.handle(SimpleHandlerAdapter.java:46)
	|_                         Mono.onErrorResume ⇢ at org.springframework.web.reactive.DispatcherHandler.handleResultMono(DispatcherHandler.java:168)
	|_                               Mono.flatMap ⇢ at org.springframework.web.reactive.DispatcherHandler.handleResultMono(DispatcherHandler.java:172)
	*__________________________________Mono.error ⇢ at org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.handleException(RequestMappingHandlerAdapter.java:340)
	*________________________________Mono.flatMap ⇢ at org.springframework.web.reactive.DispatcherHandler.handle(DispatcherHandler.java:154)
	*__________________________________Mono.defer ⇢ at org.springframework.web.server.handler.DefaultWebFilterChain.filter(DefaultWebFilterChain.java:106)
	|_                                 checkpoint ⇢ com.project.apigateway.filter.GlobalCorsFilter$$Lambda/0x000002394071a608 [DefaultWebFilterChain]
	*__________________________________Mono.defer ⇢ at org.springframework.web.server.handler.DefaultWebFilterChain.filter(DefaultWebFilterChain.java:106)
	|_                                 checkpoint ⇢ org.springframework.cloud.gateway.filter.WeightCalculatorWebFilter [DefaultWebFilterChain]
	*__________________________________Mono.defer ⇢ at org.springframework.web.server.handler.DefaultWebFilterChain.filter(DefaultWebFilterChain.java:106)
	|_                           Mono.doOnSuccess ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$WebFilterObservation$SimpleWebFilterObservation.lambda$wrap$6(ObservationWebFilterChainDecorator.java:560)
	|_                            Mono.doOnCancel ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$WebFilterObservation$SimpleWebFilterObservation.lambda$wrap$6(ObservationWebFilterChainDecorator.java:561)
	|_                             Mono.doOnError ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$WebFilterObservation$SimpleWebFilterObservation.lambda$wrap$6(ObservationWebFilterChainDecorator.java:562)
	|_                          Mono.contextWrite ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$WebFilterObservation$SimpleWebFilterObservation.lambda$wrap$6(ObservationWebFilterChainDecorator.java:566)
	|_                           Mono.doOnSuccess ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$AroundWebFilterObservation$SimpleAroundWebFilterObservation.lambda$wrap$2(ObservationWebFilterChainDecorator.java:351)
	|_                            Mono.doOnCancel ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$AroundWebFilterObservation$SimpleAroundWebFilterObservation.lambda$wrap$2(ObservationWebFilterChainDecorator.java:352)
	|_                             Mono.doOnError ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$AroundWebFilterObservation$SimpleAroundWebFilterObservation.lambda$wrap$2(ObservationWebFilterChainDecorator.java:353)
	*________________________Mono.deferContextual ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator.lambda$wrapSecured$1(ObservationWebFilterChainDecorator.java:76)
	*__________________________________Mono.defer ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilterChain.filter(ObservationWebFilterChainDecorator.java:152)
	*__________________________Mono.switchIfEmpty ⇢ at org.springframework.security.web.server.authorization.AuthorizationWebFilter.filter(AuthorizationWebFilter.java:56)
	|_                           Mono.doOnSuccess ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilter.wrapFilter(ObservationWebFilterChainDecorator.java:211)
	|_                                 checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__________________________________Mono.defer ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilterChain.filter(ObservationWebFilterChainDecorator.java:152)
	|_                         Mono.onErrorResume ⇢ at org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter.filter(ExceptionTranslationWebFilter.java:53)
	|_                           Mono.doOnSuccess ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilter.wrapFilter(ObservationWebFilterChainDecorator.java:211)
	|_                                 checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__________________________________Mono.defer ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilterChain.filter(ObservationWebFilterChainDecorator.java:152)
	*___________________________________Mono.then ⇢ at org.springframework.security.web.server.authentication.logout.LogoutWebFilter.filter(LogoutWebFilter.java:63)
	*__________________________Mono.switchIfEmpty ⇢ at org.springframework.security.web.server.authentication.logout.LogoutWebFilter.filter(LogoutWebFilter.java:63)
	|_                                   Mono.map ⇢ at org.springframework.security.web.server.authentication.logout.LogoutWebFilter.filter(LogoutWebFilter.java:64)
	|_                               Mono.flatMap ⇢ at org.springframework.security.web.server.authentication.logout.LogoutWebFilter.filter(LogoutWebFilter.java:65)
	|_                               Mono.flatMap ⇢ at org.springframework.security.web.server.authentication.logout.LogoutWebFilter.filter(LogoutWebFilter.java:66)
	|_                           Mono.doOnSuccess ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilter.wrapFilter(ObservationWebFilterChainDecorator.java:211)
	|_                                 checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__________________________________Mono.defer ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilterChain.filter(ObservationWebFilterChainDecorator.java:152)
	*________________________________Mono.flatMap ⇢ at org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter.filter(ServerRequestCacheWebFilter.java:41)
	|_                           Mono.doOnSuccess ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilter.wrapFilter(ObservationWebFilterChainDecorator.java:211)
	|_                                 checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__________________________________Mono.defer ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilterChain.filter(ObservationWebFilterChainDecorator.java:152)
	|_                           Mono.doOnSuccess ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilter.wrapFilter(ObservationWebFilterChainDecorator.java:211)
	|_                                 checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__________________________________Mono.defer ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilterChain.filter(ObservationWebFilterChainDecorator.java:152)
	|_                          Mono.contextWrite ⇢ at org.springframework.security.web.server.context.ReactorContextWebFilter.filter(ReactorContextWebFilter.java:48)
	|_                           Mono.doOnSuccess ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilter.wrapFilter(ObservationWebFilterChainDecorator.java:211)
	|_                                 checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__________________________________Mono.defer ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilterChain.filter(ObservationWebFilterChainDecorator.java:152)
	|_                           Mono.doOnSuccess ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilter.wrapFilter(ObservationWebFilterChainDecorator.java:211)
	|_                                 checkpoint ⇢ CorsWebFilter [DefaultWebFilterChain]
	*__________________________________Mono.defer ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilterChain.filter(ObservationWebFilterChainDecorator.java:152)
	|_                           Mono.doOnSuccess ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilter.wrapFilter(ObservationWebFilterChainDecorator.java:211)
	|_                                 checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__________________________________Mono.defer ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilterChain.filter(ObservationWebFilterChainDecorator.java:152)
	|_                          Mono.contextWrite ⇢ at org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter.filter(ServerHttpSecurity.java:4047)
	|_                           Mono.doOnSuccess ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilter.wrapFilter(ObservationWebFilterChainDecorator.java:211)
	|_                           Mono.doOnSuccess ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$AroundWebFilterObservation$SimpleAroundWebFilterObservation.lambda$wrap$6(ObservationWebFilterChainDecorator.java:367)
	|_                            Mono.doOnCancel ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$AroundWebFilterObservation$SimpleAroundWebFilterObservation.lambda$wrap$6(ObservationWebFilterChainDecorator.java:368)
	|_                             Mono.doOnError ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$AroundWebFilterObservation$SimpleAroundWebFilterObservation.lambda$wrap$6(ObservationWebFilterChainDecorator.java:369)
	|_                          Mono.contextWrite ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$AroundWebFilterObservation$SimpleAroundWebFilterObservation.lambda$wrap$6(ObservationWebFilterChainDecorator.java:373)
	*________________________Mono.deferContextual ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilter.filter(ObservationWebFilterChainDecorator.java:193)
	|_                                 checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__________________________________Mono.defer ⇢ at org.springframework.security.web.server.ObservationWebFilterChainDecorator$ObservationWebFilterChain.filter(ObservationWebFilterChainDecorator.java:152)
	*________________________________Mono.flatMap ⇢ at org.springframework.security.web.server.WebFilterChainProxy.filterFirewalledExchange(WebFilterChainProxy.java:78)
	*________________________________Mono.flatMap ⇢ at org.springframework.security.web.server.WebFilterChainProxy.filter(WebFilterChainProxy.java:65)
	|_                         Mono.onErrorResume ⇢ at org.springframework.security.web.server.WebFilterChainProxy.filter(WebFilterChainProxy.java:66)
	|_                                 checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__________________________________Mono.defer ⇢ at org.springframework.web.server.handler.DefaultWebFilterChain.filter(DefaultWebFilterChain.java:106)
	|_                                 checkpoint ⇢ com.project.apigateway.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__________________________________Mono.defer ⇢ at org.springframework.web.server.handler.DefaultWebFilterChain.filter(DefaultWebFilterChain.java:106)
	|_                             Mono.doOnError ⇢ at org.springframework.web.server.handler.ExceptionHandlingWebHandler.handle(ExceptionHandlingWebHandler.java:84)
	|_                         Mono.onErrorResume ⇢ at org.springframework.web.server.handler.ExceptionHandlingWebHandler.handle(ExceptionHandlingWebHandler.java:85)
	|_                             Mono.doOnError ⇢ at org.springframework.web.server.handler.ExceptionHandlingWebHandler.handle(ExceptionHandlingWebHandler.java:84)
	|_                         Mono.onErrorResume ⇢ at org.springframework.web.server.handler.ExceptionHandlingWebHandler.handle(ExceptionHandlingWebHandler.java:85)
	|_                             Mono.doOnError ⇢ at org.springframework.web.server.handler.ExceptionHandlingWebHandler.handle(ExceptionHandlingWebHandler.java:84)
	*__________________________________Mono.error ⇢ at org.springframework.web.server.handler.ExceptionHandlingWebHandler$CheckpointInsertingHandler.handle(ExceptionHandlingWebHandler.java:106)
	|_                                 checkpoint ⇢ HTTP POST "/users/api/v1/auth/login" [ExceptionHandlingWebHandler]
	*__________________________________Mono.error ⇢ at org.springframework.cloud.gateway.filter.headers.observation.ObservationClosingWebExceptionHandler.handle(ObservationClosingWebExceptionHandler.java:53)
Original Stack Trace:
Caused by: java.net.ConnectException: Connection refused: getsockopt
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:682)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:1062)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:336)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:339)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:784)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-04 20:38:28 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=POST),tag(httpStatusCode=500),tag(outcome=SERVER_ERROR),tag(routeId=user-service-route),tag(routeUri=http://localhost:8081),tag(status=INTERNAL_SERVER_ERROR)]
2025-04-04 20:38:38 | TRACE | Weights attr: {}
2025-04-04 20:38:38 | TRACE | Pattern "/users/**" matches against value "/users/api/v1/auth/login"
2025-04-04 20:38:38 | DEBUG | Route matched: user-service-route
2025-04-04 20:38:38 | DEBUG | Mapping [Exchange: POST http://localhost:8080/users/api/v1/auth/login] to Route{id='user-service-route', uri=http://localhost:8081, order=0, predicate=Paths: [/users/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:38:38 | DEBUG | [9a75a5a1-2] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:38:38 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:38:38 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:38:38 | DEBUG | Will instrument the HTTP request headers [X-Forwarded-For:"203.0.113.50,0:0:0:0:0:0:0:1", Content-Type:"application/json", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"65041a3c-3016-42a6-98fb-1c59c5549ced", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"69", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:59655"", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:38:38 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='POST', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='user-service-route', spring.cloud.gateway.route.uri='http://localhost:8081'], highCardinalityKeyValues=[http.uri='http://localhost:8080/users/api/v1/auth/login'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=1.483E-4, duration(nanos)=148300.0, startTimeNanos=1299431566042800}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@254b0685'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@2b8cec5c} created for the request. New headers are [X-Forwarded-For:"203.0.113.50,0:0:0:0:0:0:0:1", Content-Type:"application/json", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"65041a3c-3016-42a6-98fb-1c59c5549ced", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"69", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:59655"", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:38:38 | TRACE | outbound route: 8a1d39e6, inbound: [9a75a5a1-2] 
2025-04-04 20:38:40 | DEBUG | Will instrument the response
2025-04-04 20:38:40 | DEBUG | The response was handled for observation {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='POST', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='user-service-route', spring.cloud.gateway.route.uri='http://localhost:8081'], highCardinalityKeyValues=[http.uri='http://localhost:8080/users/api/v1/auth/login'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=1.3931082, duration(nanos)=1.3931082E9, startTimeNanos=1299431566042800}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@254b0685'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@2b8cec5c}
2025-04-04 20:38:40 | TRACE | NettyWriteResponseFilter start inbound: 8a1d39e6, outbound: [9a75a5a1-2] 
2025-04-04 20:38:40 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=POST),tag(httpStatusCode=200),tag(outcome=SUCCESSFUL),tag(routeId=user-service-route),tag(routeUri=http://localhost:8081),tag(status=OK)]
2025-04-04 20:39:24 | TRACE | Weights attr: {}
2025-04-04 20:39:24 | TRACE | Pattern "[/users/**]" does not match against value "/accounts/payment-methods/api/v1/me/create"
2025-04-04 20:39:24 | TRACE | Pattern "/accounts/**" matches against value "/accounts/payment-methods/api/v1/me/create"
2025-04-04 20:39:24 | DEBUG | Route matched: account-service-route
2025-04-04 20:39:24 | DEBUG | Mapping [Exchange: POST http://localhost:8080/accounts/payment-methods/api/v1/me/create] to Route{id='account-service-route', uri=http://localhost:8083, order=0, predicate=Paths: [/accounts/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:39:24 | DEBUG | [9a75a5a1-3] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:39:24 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:39:24 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:39:24 | DEBUG | Will instrument the HTTP request headers [Content-Type:"application/json", Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"4bf5d500-200f-4e77-927e-4dd2283ed17d", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"247", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:59655"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:39:24 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='POST', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/me/create'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=1.107E-4, duration(nanos)=110700.0, startTimeNanos=1299477448479500}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@41f5d278'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@41261ea5} created for the request. New headers are [Content-Type:"application/json", Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"4bf5d500-200f-4e77-927e-4dd2283ed17d", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"247", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:59655"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:39:24 | TRACE | outbound route: 5d09c076, inbound: [9a75a5a1-3] 
2025-04-04 20:39:26 | DEBUG | Will instrument the response
2025-04-04 20:39:26 | DEBUG | The response was handled for observation {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='POST', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/me/create'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=1.5567022, duration(nanos)=1.5567022E9, startTimeNanos=1299477448479500}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@41f5d278'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@41261ea5}
2025-04-04 20:39:26 | TRACE | NettyWriteResponseFilter start inbound: 5d09c076, outbound: [9a75a5a1-3] 
2025-04-04 20:39:26 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=POST),tag(httpStatusCode=200),tag(outcome=SUCCESSFUL),tag(routeId=account-service-route),tag(routeUri=http://localhost:8083),tag(status=OK)]
2025-04-04 20:43:36 | TRACE | Weights attr: {}
2025-04-04 20:43:36 | TRACE | Pattern "[/users/**]" does not match against value "/accounts/payment-methods/api/v1/me/create"
2025-04-04 20:43:36 | TRACE | Pattern "/accounts/**" matches against value "/accounts/payment-methods/api/v1/me/create"
2025-04-04 20:43:36 | DEBUG | Route matched: account-service-route
2025-04-04 20:43:36 | DEBUG | Mapping [Exchange: POST http://localhost:8080/accounts/payment-methods/api/v1/me/create] to Route{id='account-service-route', uri=http://localhost:8083, order=0, predicate=Paths: [/accounts/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:43:36 | DEBUG | [2e940f63-4] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:43:36 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:43:36 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:43:36 | DEBUG | Will instrument the HTTP request headers [Content-Type:"application/json", Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"c494d834-9b9d-4906-bc23-17eb2a699a78", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"250", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:60274"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:43:36 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='POST', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/me/create'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=3.574E-4, duration(nanos)=357400.0, startTimeNanos=1299729001647800}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@616b4a77'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@6faca82a} created for the request. New headers are [Content-Type:"application/json", Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"c494d834-9b9d-4906-bc23-17eb2a699a78", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"250", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:60274"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:43:36 | TRACE | outbound route: cd8b5721, inbound: [2e940f63-4] 
2025-04-04 20:43:36 | DEBUG | Will instrument the response
2025-04-04 20:43:36 | DEBUG | The response was handled for observation {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='POST', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/me/create'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=0.1650406, duration(nanos)=1.650406E8, startTimeNanos=1299729001647800}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@616b4a77'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@6faca82a}
2025-04-04 20:43:36 | TRACE | NettyWriteResponseFilter start inbound: cd8b5721, outbound: [2e940f63-4] 
2025-04-04 20:43:36 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=POST),tag(httpStatusCode=200),tag(outcome=SUCCESSFUL),tag(routeId=account-service-route),tag(routeUri=http://localhost:8083),tag(status=OK)]
2025-04-04 20:46:53 | TRACE | Weights attr: {}
2025-04-04 20:46:53 | TRACE | Pattern "[/users/**]" does not match against value "/accounts/payment-methods/api/v1/67ed43e47c82b1393121f319/verify"
2025-04-04 20:46:53 | TRACE | Pattern "/accounts/**" matches against value "/accounts/payment-methods/api/v1/67ed43e47c82b1393121f319/verify"
2025-04-04 20:46:53 | DEBUG | Route matched: account-service-route
2025-04-04 20:46:53 | DEBUG | Mapping [Exchange: POST http://localhost:8080/accounts/payment-methods/api/v1/67ed43e47c82b1393121f319/verify] to Route{id='account-service-route', uri=http://localhost:8083, order=0, predicate=Paths: [/accounts/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:46:53 | DEBUG | [0f7f2a1a-6] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:46:53 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:46:53 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:46:53 | DEBUG | Will instrument the HTTP request headers [Content-Type:"application/json", Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"450b1d1e-1cdf-4503-819a-7f20eac6ff26", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"127", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:60460"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:46:53 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='POST', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67ed43e47c82b1393121f319/verify'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=1.305E-4, duration(nanos)=130500.0, startTimeNanos=1299926170709900}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@7f7be499'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@3159eb19} created for the request. New headers are [Content-Type:"application/json", Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"450b1d1e-1cdf-4503-819a-7f20eac6ff26", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"127", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:60460"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:46:53 | TRACE | outbound route: fa9e7eb2, inbound: [0f7f2a1a-6] 
2025-04-04 20:46:53 | DEBUG | Will instrument the response
2025-04-04 20:46:53 | DEBUG | The response was handled for observation {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='POST', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67ed43e47c82b1393121f319/verify'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=0.4308656, duration(nanos)=4.308656E8, startTimeNanos=1299926170709900}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@7f7be499'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@3159eb19}
2025-04-04 20:46:53 | TRACE | NettyWriteResponseFilter start inbound: fa9e7eb2, outbound: [0f7f2a1a-6] 
2025-04-04 20:46:53 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=POST),tag(httpStatusCode=200),tag(outcome=SUCCESSFUL),tag(routeId=account-service-route),tag(routeUri=http://localhost:8083),tag(status=OK)]
2025-04-04 20:47:12 | TRACE | Weights attr: {}
2025-04-04 20:47:12 | TRACE | Pattern "[/users/**]" does not match against value "/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/verify"
2025-04-04 20:47:12 | TRACE | Pattern "/accounts/**" matches against value "/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/verify"
2025-04-04 20:47:12 | DEBUG | Route matched: account-service-route
2025-04-04 20:47:12 | DEBUG | Mapping [Exchange: POST http://localhost:8080/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/verify] to Route{id='account-service-route', uri=http://localhost:8083, order=0, predicate=Paths: [/accounts/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:47:12 | DEBUG | [0f7f2a1a-7] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:47:12 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:47:12 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:47:12 | DEBUG | Will instrument the HTTP request headers [Content-Type:"application/json", Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"2616977a-ef7c-4c02-86f9-66113ea1ebc1", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"127", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:60460"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:47:12 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='POST', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/verify'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=1.069E-4, duration(nanos)=106900.0, startTimeNanos=1299945665389600}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@1733ba9a'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@5b914a2c} created for the request. New headers are [Content-Type:"application/json", Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"2616977a-ef7c-4c02-86f9-66113ea1ebc1", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"127", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:60460"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:47:12 | TRACE | outbound route: fa9e7eb2, inbound: [0f7f2a1a-7] 
2025-04-04 20:47:12 | DEBUG | Will instrument the response
2025-04-04 20:47:12 | DEBUG | The response was handled for observation {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='POST', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/verify'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=0.1743382, duration(nanos)=1.743382E8, startTimeNanos=1299945665389600}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@1733ba9a'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@5b914a2c}
2025-04-04 20:47:12 | TRACE | NettyWriteResponseFilter start inbound: fa9e7eb2, outbound: [0f7f2a1a-7] 
2025-04-04 20:47:12 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=POST),tag(httpStatusCode=200),tag(outcome=SUCCESSFUL),tag(routeId=account-service-route),tag(routeUri=http://localhost:8083),tag(status=OK)]
2025-04-04 20:47:54 | TRACE | Weights attr: {}
2025-04-04 20:47:54 | TRACE | Pattern "[/users/**]" does not match against value "/accounts/payment-methods/api/v1/me/get"
2025-04-04 20:47:54 | TRACE | Pattern "/accounts/**" matches against value "/accounts/payment-methods/api/v1/me/get"
2025-04-04 20:47:54 | DEBUG | Route matched: account-service-route
2025-04-04 20:47:54 | DEBUG | Mapping [Exchange: GET http://localhost:8080/accounts/payment-methods/api/v1/me/get] to Route{id='account-service-route', uri=http://localhost:8083, order=0, predicate=Paths: [/accounts/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:47:54 | DEBUG | [0f7f2a1a-8] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:47:54 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:47:54 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:47:54 | DEBUG | Will instrument the HTTP request headers [Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"8e4e4276-866a-4486-bee0-51a10d2c61be", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:60460"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:47:54 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='GET', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/me/get'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=1.824E-4, duration(nanos)=182400.0, startTimeNanos=1299987140454500}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@40b52f27'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@3117c2a2} created for the request. New headers are [Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"8e4e4276-866a-4486-bee0-51a10d2c61be", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:60460"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:47:54 | TRACE | outbound route: fa9e7eb2, inbound: [0f7f2a1a-8] 
2025-04-04 20:47:54 | DEBUG | Will instrument the response
2025-04-04 20:47:54 | DEBUG | The response was handled for observation {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='GET', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/me/get'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=0.4237767, duration(nanos)=4.237767E8, startTimeNanos=1299987140454500}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@40b52f27'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@3117c2a2}
2025-04-04 20:47:54 | TRACE | NettyWriteResponseFilter start inbound: fa9e7eb2, outbound: [0f7f2a1a-8] 
2025-04-04 20:47:54 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=GET),tag(httpStatusCode=200),tag(outcome=SUCCESSFUL),tag(routeId=account-service-route),tag(routeUri=http://localhost:8083),tag(status=OK)]
2025-04-04 20:50:28 | TRACE | Weights attr: {}
2025-04-04 20:50:28 | TRACE | Pattern "[/users/**]" does not match against value "/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/verify"
2025-04-04 20:50:28 | TRACE | Pattern "/accounts/**" matches against value "/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/verify"
2025-04-04 20:50:28 | DEBUG | Route matched: account-service-route
2025-04-04 20:50:28 | DEBUG | Mapping [Exchange: GET http://localhost:8080/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/verify] to Route{id='account-service-route', uri=http://localhost:8083, order=0, predicate=Paths: [/accounts/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:50:28 | DEBUG | [60212d2a-9] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:50:28 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:50:28 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:50:28 | DEBUG | Will instrument the HTTP request headers [Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"e3c198f5-b736-4e26-b70a-20bec4c739e4", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:60841"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:50:28 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='GET', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/verify'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=1.907E-4, duration(nanos)=190700.0, startTimeNanos=1300141535556300}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@4af0e751'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@1f7d36c} created for the request. New headers are [Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"e3c198f5-b736-4e26-b70a-20bec4c739e4", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:60841"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:50:28 | TRACE | outbound route: 332f655a, inbound: [60212d2a-9] 
2025-04-04 20:50:28 | DEBUG | Will instrument the response
2025-04-04 20:50:28 | DEBUG | The response was handled for observation {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='GET', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/verify'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=0.090985, duration(nanos)=9.0985E7, startTimeNanos=1300141535556300}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@4af0e751'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@1f7d36c}
2025-04-04 20:50:28 | TRACE | NettyWriteResponseFilter start inbound: 332f655a, outbound: [60212d2a-9] 
2025-04-04 20:50:28 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=GET),tag(httpStatusCode=405),tag(outcome=CLIENT_ERROR),tag(routeId=account-service-route),tag(routeUri=http://localhost:8083),tag(status=METHOD_NOT_ALLOWED)]
2025-04-04 20:51:58 | TRACE | Weights attr: {}
2025-04-04 20:51:58 | TRACE | Pattern "[/users/**]" does not match against value "/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c"
2025-04-04 20:51:58 | TRACE | Pattern "/accounts/**" matches against value "/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c"
2025-04-04 20:51:58 | DEBUG | Route matched: account-service-route
2025-04-04 20:51:58 | DEBUG | Mapping [Exchange: GET http://localhost:8080/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c] to Route{id='account-service-route', uri=http://localhost:8083, order=0, predicate=Paths: [/accounts/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:51:58 | DEBUG | [e243ad4e-10] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:51:58 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:51:58 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:51:58 | DEBUG | Will instrument the HTTP request headers [Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"951ae27a-c2eb-4213-91d4-60e7282ef4e1", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:60992"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:51:58 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='GET', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=1.073E-4, duration(nanos)=107300.0, startTimeNanos=1300231416886800}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@1ac4b8a'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@7f537985} created for the request. New headers are [Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"951ae27a-c2eb-4213-91d4-60e7282ef4e1", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:60992"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:51:58 | TRACE | outbound route: 481b5bc2, inbound: [e243ad4e-10] 
2025-04-04 20:51:58 | DEBUG | Will instrument the response
2025-04-04 20:51:58 | DEBUG | The response was handled for observation {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='GET', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=0.1952669, duration(nanos)=1.952669E8, startTimeNanos=1300231416886800}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@1ac4b8a'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@7f537985}
2025-04-04 20:51:58 | TRACE | NettyWriteResponseFilter start inbound: 481b5bc2, outbound: [e243ad4e-10] 
2025-04-04 20:51:58 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=GET),tag(httpStatusCode=500),tag(outcome=SERVER_ERROR),tag(routeId=account-service-route),tag(routeUri=http://localhost:8083),tag(status=INTERNAL_SERVER_ERROR)]
2025-04-04 20:52:44 | TRACE | Weights attr: {}
2025-04-04 20:52:44 | TRACE | Pattern "[/users/**]" does not match against value "/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d"
2025-04-04 20:52:44 | TRACE | Pattern "/accounts/**" matches against value "/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d"
2025-04-04 20:52:44 | DEBUG | Route matched: account-service-route
2025-04-04 20:52:44 | DEBUG | Mapping [Exchange: GET http://localhost:8080/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d] to Route{id='account-service-route', uri=http://localhost:8083, order=0, predicate=Paths: [/accounts/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:52:44 | DEBUG | [e243ad4e-11] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:52:44 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:52:44 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:52:44 | DEBUG | Will instrument the HTTP request headers [Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"622b5531-d079-4bbe-a687-ff653312247a", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:60992"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:52:44 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='GET', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=9.94E-5, duration(nanos)=99400.0, startTimeNanos=1300277351432100}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@73858b'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@51e27f83} created for the request. New headers are [Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"622b5531-d079-4bbe-a687-ff653312247a", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:60992"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:52:44 | TRACE | outbound route: c3dbfc6e, inbound: [e243ad4e-11] 
2025-04-04 20:52:44 | DEBUG | Will instrument the response
2025-04-04 20:52:44 | DEBUG | The response was handled for observation {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='GET', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=0.1855174, duration(nanos)=1.855174E8, startTimeNanos=1300277351432100}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@73858b'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@51e27f83}
2025-04-04 20:52:44 | TRACE | NettyWriteResponseFilter start inbound: c3dbfc6e, outbound: [e243ad4e-11] 
2025-04-04 20:52:44 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=GET),tag(httpStatusCode=500),tag(outcome=SERVER_ERROR),tag(routeId=account-service-route),tag(routeUri=http://localhost:8083),tag(status=INTERNAL_SERVER_ERROR)]
2025-04-04 20:55:00 | TRACE | Weights attr: {}
2025-04-04 20:55:00 | TRACE | Pattern "[/users/**]" does not match against value "/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d"
2025-04-04 20:55:00 | TRACE | Pattern "/accounts/**" matches against value "/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d"
2025-04-04 20:55:00 | DEBUG | Route matched: account-service-route
2025-04-04 20:55:00 | DEBUG | Mapping [Exchange: GET http://localhost:8080/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d] to Route{id='account-service-route', uri=http://localhost:8083, order=0, predicate=Paths: [/accounts/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:55:00 | DEBUG | [131fdf9a-12] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:55:00 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:55:00 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:55:00 | DEBUG | Will instrument the HTTP request headers [Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"46cf656d-726e-43c5-93e9-07b26d5eae6e", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:61197"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:55:00 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='GET', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=1.107E-4, duration(nanos)=110700.0, startTimeNanos=1300412996779900}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@197656b'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@68b2be69} created for the request. New headers are [Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"46cf656d-726e-43c5-93e9-07b26d5eae6e", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:61197"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:55:00 | TRACE | outbound route: 1f632215, inbound: [131fdf9a-12] 
2025-04-04 20:55:01 | DEBUG | Will instrument the response
2025-04-04 20:55:01 | DEBUG | The response was handled for observation {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='GET', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=1.2406747, duration(nanos)=1.2406747E9, startTimeNanos=1300412996779900}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@197656b'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@68b2be69}
2025-04-04 20:55:01 | TRACE | NettyWriteResponseFilter start inbound: 1f632215, outbound: [131fdf9a-12] 
2025-04-04 20:55:01 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=GET),tag(httpStatusCode=200),tag(outcome=SUCCESSFUL),tag(routeId=account-service-route),tag(routeUri=http://localhost:8083),tag(status=OK)]
2025-04-04 20:56:28 | TRACE | Weights attr: {}
2025-04-04 20:56:28 | TRACE | Pattern "[/users/**]" does not match against value "/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/delete"
2025-04-04 20:56:28 | TRACE | Pattern "/accounts/**" matches against value "/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/delete"
2025-04-04 20:56:28 | DEBUG | Route matched: account-service-route
2025-04-04 20:56:28 | DEBUG | Mapping [Exchange: DELETE http://localhost:8080/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/delete] to Route{id='account-service-route', uri=http://localhost:8083, order=0, predicate=Paths: [/accounts/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:56:28 | DEBUG | [379ff606-13] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:56:28 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:56:28 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:56:28 | DEBUG | Will instrument the HTTP request headers [Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"dd412141-78e8-4d9c-a0e4-d938862c5b71", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:61250"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:56:28 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='DELETE', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/delete'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=2.002E-4, duration(nanos)=200200.0, startTimeNanos=1300501330142300}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@642a600'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@39116917} created for the request. New headers are [Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"dd412141-78e8-4d9c-a0e4-d938862c5b71", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:61250"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:56:28 | TRACE | outbound route: 3e61f3f1, inbound: [379ff606-13] 
2025-04-04 20:56:28 | DEBUG | Will instrument the response
2025-04-04 20:56:28 | DEBUG | The response was handled for observation {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='DELETE', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67efe10de5ef12698df2070c/delete'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=0.1620157, duration(nanos)=1.620157E8, startTimeNanos=1300501330142300}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@642a600'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@39116917}
2025-04-04 20:56:28 | TRACE | NettyWriteResponseFilter start inbound: 3e61f3f1, outbound: [379ff606-13] 
2025-04-04 20:56:28 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=DELETE),tag(httpStatusCode=200),tag(outcome=SUCCESSFUL),tag(routeId=account-service-route),tag(routeUri=http://localhost:8083),tag(status=OK)]
2025-04-04 20:57:47 | TRACE | Weights attr: {}
2025-04-04 20:57:47 | TRACE | Pattern "[/users/**]" does not match against value "/accounts/payment-methods/api/v1/67ed43e47c82b1393121f319/update"
2025-04-04 20:57:47 | TRACE | Pattern "/accounts/**" matches against value "/accounts/payment-methods/api/v1/67ed43e47c82b1393121f319/update"
2025-04-04 20:57:47 | DEBUG | Route matched: account-service-route
2025-04-04 20:57:47 | DEBUG | Mapping [Exchange: PUT http://localhost:8080/accounts/payment-methods/api/v1/67ed43e47c82b1393121f319/update] to Route{id='account-service-route', uri=http://localhost:8083, order=0, predicate=Paths: [/accounts/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:57:47 | DEBUG | [586e9fea-14] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:57:47 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:57:47 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:57:47 | DEBUG | Will instrument the HTTP request headers [Content-Type:"application/json", Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"b0f9e514-91c4-45a0-9e2b-eef7c01c015f", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"140", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:61301"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:57:47 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='PUT', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67ed43e47c82b1393121f319/update'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=1.136E-4, duration(nanos)=113600.0, startTimeNanos=1300580064007400}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@6925cbb8'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@d5e1848} created for the request. New headers are [Content-Type:"application/json", Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"b0f9e514-91c4-45a0-9e2b-eef7c01c015f", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"140", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:61301"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:57:47 | TRACE | outbound route: 9f44f823, inbound: [586e9fea-14] 
2025-04-04 20:57:47 | DEBUG | Will instrument the response
2025-04-04 20:57:47 | DEBUG | The response was handled for observation {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='PUT', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67ed43e47c82b1393121f319/update'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=0.1207017, duration(nanos)=1.207017E8, startTimeNanos=1300580064007400}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@6925cbb8'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@d5e1848}
2025-04-04 20:57:47 | TRACE | NettyWriteResponseFilter start inbound: 9f44f823, outbound: [586e9fea-14] 
2025-04-04 20:57:47 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=PUT),tag(httpStatusCode=200),tag(outcome=SUCCESSFUL),tag(routeId=account-service-route),tag(routeUri=http://localhost:8083),tag(status=OK)]
2025-04-04 20:58:03 | TRACE | Weights attr: {}
2025-04-04 20:58:03 | TRACE | Pattern "[/users/**]" does not match against value "/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d/update"
2025-04-04 20:58:03 | TRACE | Pattern "/accounts/**" matches against value "/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d/update"
2025-04-04 20:58:03 | DEBUG | Route matched: account-service-route
2025-04-04 20:58:03 | DEBUG | Mapping [Exchange: PUT http://localhost:8080/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d/update] to Route{id='account-service-route', uri=http://localhost:8083, order=0, predicate=Paths: [/accounts/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:58:03 | DEBUG | [586e9fea-15] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:58:03 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:58:03 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:58:03 | DEBUG | Will instrument the HTTP request headers [Content-Type:"application/json", Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"9d6fedf7-f96c-4f96-bb2b-c5587745508f", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"140", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:61301"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:58:03 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='PUT', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d/update'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=1.049E-4, duration(nanos)=104900.0, startTimeNanos=1300596740835900}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@1293648b'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@504f1f3d} created for the request. New headers are [Content-Type:"application/json", Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"9d6fedf7-f96c-4f96-bb2b-c5587745508f", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Content-Length:"140", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:61301"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:58:03 | TRACE | outbound route: 9f44f823, inbound: [586e9fea-15] 
2025-04-04 20:58:04 | DEBUG | Will instrument the response
2025-04-04 20:58:04 | DEBUG | The response was handled for observation {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='PUT', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='account-service-route', spring.cloud.gateway.route.uri='http://localhost:8083'], highCardinalityKeyValues=[http.uri='http://localhost:8080/accounts/payment-methods/api/v1/67efe208e5ef12698df2070d/update'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=0.286462, duration(nanos)=2.86462E8, startTimeNanos=1300596740835900}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@1293648b'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@504f1f3d}
2025-04-04 20:58:04 | TRACE | NettyWriteResponseFilter start inbound: 9f44f823, outbound: [586e9fea-15] 
2025-04-04 20:58:04 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=PUT),tag(httpStatusCode=200),tag(outcome=SUCCESSFUL),tag(routeId=account-service-route),tag(routeUri=http://localhost:8083),tag(status=OK)]
2025-04-04 20:59:42 | TRACE | Weights attr: {}
2025-04-04 20:59:42 | TRACE | Pattern "/users/**" matches against value "/users/api/v1/internal/users/67d3f1ac3bc6d448649314fa/verification-status"
2025-04-04 20:59:42 | DEBUG | Route matched: user-service-route
2025-04-04 20:59:42 | DEBUG | Mapping [Exchange: GET http://localhost:8080/users/api/v1/internal/users/67d3f1ac3bc6d448649314fa/verification-status?requestingService=TEST] to Route{id='user-service-route', uri=http://localhost:8081, order=0, predicate=Paths: [/users/**], match trailing slash: true, gatewayFilters=[], metadata={}}
2025-04-04 20:59:42 | DEBUG | [9f40240e-16] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@49222187
2025-04-04 20:59:42 | DEBUG | Sorted gatewayFilterFactories: [[GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@4e67e090}, order = -2147483648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@4a3383dc}, order = -2147482648], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@bb38c49}, order = -1], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardPathFilter@35e357b}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.GatewayMetricsFilter@6055e899}, order = 0], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@361483eb}, order = 10000], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@350be5ec}, order = 10150], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@724c26e0}, order = 2147483646], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.NettyRoutingFilter@3a42145}, order = 2147483647], [GatewayFilterAdapter{delegate=org.springframework.cloud.gateway.filter.ForwardRoutingFilter@14983265}, order = 2147483647]]
2025-04-04 20:59:42 | TRACE | RouteToRequestUrlFilter start
2025-04-04 20:59:42 | DEBUG | Will instrument the HTTP request headers [Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"301bcdda-c3bb-4c0b-a787-e5523d974866", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:61383"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:59:42 | DEBUG | Client observation  {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='GET', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='user-service-route', spring.cloud.gateway.route.uri='http://localhost:8081'], highCardinalityKeyValues=[http.uri='http://localhost:8080/users/api/v1/internal/users/67d3f1ac3bc6d448649314fa/verification-status?requestingService=TEST'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=9.84E-5, duration(nanos)=98400.0, startTimeNanos=1300695030199600}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@6da272d8'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@442306db} created for the request. New headers are [Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2N2QzZjFhYzNiYzZkNDQ4NjQ5MzE0ZmEiLCJpYXQiOjE3NDM3NzM5MTksImV4cCI6MTc0Mzg2MDMxOX0.a_n6oGPmGoD7a50TLtIvVo45EmRGcefdBDcPnVHzwHI", User-Agent:"PostmanRuntime/7.43.3", Accept:"*/*", Postman-Token:"301bcdda-c3bb-4c0b-a787-e5523d974866", Host:"localhost:8080", Accept-Encoding:"gzip, deflate, br", Forwarded:"proto=http;host="localhost:8080";for="[0:0:0:0:0:0:0:1]:61383"", X-Forwarded-For:"0:0:0:0:0:0:0:1", X-Forwarded-Proto:"http", X-Forwarded-Port:"8080", X-Forwarded-Host:"localhost:8080"]
2025-04-04 20:59:42 | TRACE | outbound route: 0aa9cf96, inbound: [9f40240e-16] 
2025-04-04 20:59:44 | DEBUG | Will instrument the response
2025-04-04 20:59:44 | DEBUG | The response was handled for observation {name=http.client.requests(null), error=null, context=name='http.client.requests', contextualName='null', error='null', lowCardinalityKeyValues=[http.method='GET', http.status_code='UNKNOWN', spring.cloud.gateway.route.id='user-service-route', spring.cloud.gateway.route.uri='http://localhost:8081'], highCardinalityKeyValues=[http.uri='http://localhost:8080/users/api/v1/internal/users/67d3f1ac3bc6d448649314fa/verification-status?requestingService=TEST'], map=[class io.micrometer.core.instrument.LongTaskTimer$Sample='SampleImpl{duration(seconds)=2.5140649, duration(nanos)=2.5140649E9, startTimeNanos=1300695030199600}', class io.micrometer.core.instrument.Timer$Sample='io.micrometer.core.instrument.Timer$Sample@6da272d8'], parentObservation=org.springframework.security.web.server.ObservationWebFilterChainDecorator$PhasedObservation@442306db}
2025-04-04 20:59:44 | TRACE | NettyWriteResponseFilter start inbound: 0aa9cf96, outbound: [9f40240e-16] 
2025-04-04 20:59:44 | TRACE | spring.cloud.gateway.requests tags: [tag(httpMethod=GET),tag(httpStatusCode=200),tag(outcome=SUCCESSFUL),tag(routeId=user-service-route),tag(routeUri=http://localhost:8081),tag(status=OK)]
2025-04-04 22:17:05 | DEBUG | Stopped RedisMessageListenerContainer
2025-04-04 22:17:05 | INFO  | Commencing graceful shutdown. Waiting for active requests to complete
2025-04-04 22:17:06 | INFO  | Graceful shutdown complete
2025-04-04 22:17:07 | DEBUG | closeAsync()
2025-04-04 22:17:07 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1] closeAsync()
2025-04-04 22:17:07 | DEBUG | Initiate shutdown (0, 100, MILLISECONDS)
2025-04-04 22:17:07 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] channelInactive()
2025-04-04 22:17:07 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1] deactivating endpoint handler
2025-04-04 22:17:07 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] channelInactive() done
2025-04-04 22:17:07 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, last known addr=redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694] channelInactive()
2025-04-04 22:17:07 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, last known addr=redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694] Reconnect scheduling disabled
2025-04-04 22:17:07 | DEBUG | [channel=0xd35a518a, /192.168.2.96:59577 -> redis-14694.c258.us-east-1-4.ec2.redns.redis-cloud.com/50.17.110.170:14694, epid=0x1, chid=0x1] channelUnregistered()
2025-04-04 22:17:08 | DEBUG | Release executor io.netty.channel.nio.NioEventLoopGroup@61d011e
2025-04-04 22:17:11 | DEBUG | Initiate shutdown (0, 2, SECONDS)
2025-04-04 22:17:11 | DEBUG | Initiate shutdown (0, 2, SECONDS)
